<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
    "http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd">
<!--
  NOTE:  This XML file is input used to produce the authoritative copy of an
  OpenID Foundation specification.  The authoritative copy is the HTML output.
  This XML source file is not authoritative.  The statement ipr="none" is
  present only to satisfy the document compilation tool and is not indicative
  of the IPR status of this specification.  The IPR for this specification is
  described in the "Notices" section.  This is a public OpenID Foundation
  document and not a private document, as the private="..." declaration could
  be taken to indicate.
-->
<rfc category="info" docName="draft-hedberg-oidc-fed-00" ipr="trust200902">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="5" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Draft" ?>

  <front>

    <title abbrev="Abbreviated Title">OpenID Connect Federation</title>

    <author fullname="Roland Hedberg" role="editor" surname="Hedberg"
            initials="R.">
      <organization abbrev="UmU">Umea University</organization>
      <address>
        <email>roland.hedberg@umu.se</email>
      </address>
    </author>

    <author fullname="Rebecka Gulliksson" surname="Gulliksson" initials="R.">
      <organization abbrev="UmU">Umea University</organization>
      <address>
        <email>rebecka.gulliksson@umu.se</email>
      </address>
    </author>

    <date year="2016"/>
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>OIDC</keyword>
    <abstract>
      <t>The OpenID Connect standard specifies how a Relying Party (RP) can
        discover metadata about an OpenID Provider (OP), and then register
        to obtain client credentials. During registration, the RP provides
        metadata about its services. There is no automated mechanism for the
        OP or the RP to verify the information exchanged during this process:
        both rely on the the SSL connection, which in turn relies on the root
        certificates used to create it.
      </t>
      <t>
        This document describes how a trusted third party can enhance the
        security between the OP and RP by providing additional integrity about
        their respective metadata. Using this approach, an attacker would have
        to obtain the private keys of the trusted third party, which would
        mitigate the risk of a compromised SSL connection.
      </t>
    </abstract>
  </front>

  <middle>
    <section anchor='Introduction' title="Introduction">
      <t>The original specification of OpenID Connect defines how a
        Relying Party and an OpenID Connect Provider dynamically can
        exchange information necessary for successful communication.
      </t>
      <t>One problem with using dynamic discovery and registration is that
        the information that is exchanged can not be easily verified.
      </t>

      <!-- Schwartz: Is Software statements really such an important part of this
      solution? I would argue that the chain of trust is more central
      to the design.  -->
      <t>
        Software statements, as introduced by <xref target="RFC7591">RFC 7591</xref>,
        is a possible choice for transferring verified data and trust in the data
        by using a trusted third party (that verifies and enforces some common policy)
        between clients and servers.
      </t>
      <t>
        This document describes how software statements can be used in
        dynamic client registration and provider discovery
        to transfer verified data and to create a trust in the information
        passed between the RP and OP that is independent on the usage of SSL.
      </t>
    </section>

    <!-- Schwartz: Use of terms Relying Party and RP, OpenID Provider and OP
         are inconsistent in this document. Perhaps term definition is needed
         at the beginning of this document. -->

    <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described
        in <xref target="RFC2119">RFC 2119</xref>.
      </t>
    </section>

    <section title="Trust model">
      <t>
        The trust model is based on chain of trust, linking together
        signing keys, represented as JSON Web Keys <xref target="RFC7517">JWK</xref>,
        using JSON Web Signatures <xref target="RFC7515">JWS</xref>.
        <!-- Schwartz: Difficult to understand the following statement.
             Given that this is an introduction, I would provide a definition
             more accessible to a layman. -->
        The signature chain is rooted in the trusted third party's
        signature, and then built upon by the respective entity. 
        By verifying such signature chains, the entities can establish
        trust in the data verified by the trusted third party.
      </t>
      <t>
        The Federation Operator (FO) acting as the trusted third party will
        sign a public key belonging to an entity in the federation.
        <!-- Schwartz: maybe this private key needs a better name? -->
        Subsequently, this public key together with its
        private counterpart is the <spanx style="verb">primary key</spanx>
        of this entity.
        Since engaging a Federation Operator (FO)
        to sign a key is an
        expensive operation this should happen seldom, preferably only
        once during the lifetime of the entity.
        Despite the expense of key regeneration, recent history has shown
        that compromises of private keys do happen. It is therefore necessary
        to have a way to rotate keys. To avoid problems with a Relying Party
        or OpenID Provider not being able to handle key rotation, a best
        practice is to rotate keys often In this way, if one of the entities
        cannot handle key rotation, the problem is discovered quickly.
        In OpenID Connect, the public keys of the OP are published at the
        jwks_uri location (defined by <xref target="OpenID.Core">OIDC
        Core</xref>). An RP may either register a jwks or provide a jwks_uri
        as defined in the Client Metadata of the
        <xref target="OpenID.Registration">OIDC Registration</xref>).
      </t>
      <t>
        To allow for simple key rotation, the entity creates an
        <spanx style="verb">intermediate key</spanx>.
        The intermediate key is used by the entity to sign the JWKS containing
        the entity's public keys intended for OpenID Connect communication and
        the resulting JWS MUST be published at the location pointed to by the
        'signed_jwks_uri' parameter in the entity's metadata. An RP MUST define
        this parameter in the Client Registration Request and an OP MUST define
        this parameter in the Provider Configuration Response. An entity
        operating within the trust of a federation MUST disregard any unsigned
        keys published at the standard jwks_uri location.
      </t>
      <t>
        The intermediate key is transferred by signing the JWK representation
        of its public key and adding the resulting JWS as the value to the
        <spanx style="verb">signed_key</spanx>
        parameter or by placing a JWKS at a location specified by the URL in
        the <spanx style="verb">signed_key_uris</spanx>. The intermediate key
        MUST be signed by the key primary key.
      </t>
      <t>
        <!-- Schwartz: Not sure this next line makes sense. Counldn't a
        JWKS that is not at a URI contain more than one key too? Also,
        isn't it implicit that data at a URI can change? -->
        If the operator of the entity expects to rotate the intermediate key
        the <spanx style="verb">signed_key_uris</spanx> should be used since
        the JWKS the URI points to can contain more then one key and also
        can be modified over time. For an RP operator the alternative would be
        to re-register its metadata with the OP.
        <!-- Schwartz: Not sure I understand this: why not? -->
        An OP can not change it's
        signing key during the lifetime of a RP registration if it has use
        <spanx style="verb">signed_key_uris</spanx> to transfer its
        intermediate key.
      </t>
      <t>
        The chain from top to bottom:

        <list style="symbols">
          <t>the federations public key,</t>
          <t>the entity's primary key signed by the federation</t>
          <t>the entity's intermediate key signed by the primary key,</t>
          <t>
            the entity's public keys in a JWKS, signed by the intermediate key.
          </t>
        </list>
        <!-- Schwartz: I really wonder if adding this fourth level really accomplished
        the goal. You still have to worry about compromise of the signing_key, and that
        this can be handled by the parties. Perhaps you could use one private key
        storage mechanism for the intermediate key, and a different one for the signing
        key... but if you use the same mechanism for both (like an HSM) an a compromise
        occurs, you're now back to the original problem--you're not sure if the counterparty
        can effectively handle key rotation. The gain seem marginal. -->
        The choice of a four-level key hierarchy instead of three is based on
        the assumption that entities in the federation are long lived,
        while at the same time aligning with the practice of frequent
        key rotation between the OP and RP.
      </t>
      <t>
        The verified keys can be cached making the expensive traversal of the
        signature chain necessary only when the intermediate key are rotated.
      </t>
    </section>

    <section title="Joining a federation">
      <t>
        The Federation Operator (FO) must have access to a signing key
        pair, call it F, that is long-lived. The public part of this key,
        pub(F), MUST be distributed to all entities that are part of the
        federation.
        <!-- Schwartz: Why is this out of scope? -->
        How this is accomplished is out of scope for this document.
      </t>
      <section title="Steps of joining a federation">
        <t>
          <list style="numbers">
            <t>The operator of the entity creates a long-lived signing key pair;
              call it A.
            </t>
            <t>The entity operator submits registration data to the FO.
              The registration data MUST contain the entity's
              primary key and MAY contain other information dependent on which
              type of entity it is.
            </t>
            <t>FO returns a signed (with key F) software statement, containing
              the submitted registration data, and any policy restrictions
              applied by the FO.
            </t>
          </list>
        </t>
        <t>If the entity is a Relying Party, the registration data MUST contain
          'redirect_uris'. If the entity is an OpenID Connect Provider,
          the registration data MUST contain 'issuer'.
        </t>
      </section>
    </section>

    <section title="OpenID Connect communication">
      <figure>
        <preamble>
          The trust between the entities is established using the above
          described extensions in the first tree steps of the communication
          between an RP and an OP.
          <!-- Schwartz: Why is this out of scope? It seems like the reason
          is you are trying to fit a square peg in a round hole. Trying
          to fit in OpenID Connect Registration and Discovery will be a
          handicap. It wouldn't be flexible enough, as the owners of the
          OpenID Connect standard don't have an interest in this use case. -->
          How, the RP found the OP in the first place is out of scope for this
          document.
        </preamble>
        <artwork><![CDATA[
------                             ------
|    | <--- 1) Discovery --------> |    |
| RP | <--- 2) Registration -----> | OP |
|    | <--- 3) Authentication ---> |    |
------                             ------
        ]]>
        </artwork>
        <postamble>
          After the discovery and registration is completed a first time,
          those steps SHOULD only be repeated if any changes occur (see notes in
          respective sections below).
        </postamble>
      </figure>
      <section title="Extra metadata parameters">
        <t>
          These extra metadata parameters appear in both Provider Configuration
          Discovery and Client Registration:
        </t>
        <t>
          <list style="hanging">
            <t hangText="signed_jwks_uri">
              <vspace/>
              OPTIONAL.
              Location of the entity's signed JWKS, SHOULD return the
              Content-Type "application/jose" to
              indicate that the JWKS is in the form of a JWS using the JWS
              Compact Serialization.
            </t>
            <t hangText="signing_key">
              <vspace/>
              OPTIONAL.
              A JWS containing the entity's intermediate public key.
            </t>
            <t hangText="signing_keys_uri">
              <vspace/>
              OPTIONAL.
              Location of the JWKS containing the intermediate
              key that the entity, signed by the primary key.
            </t>
            <t hangText="signed_metadata">
              <vspace/>
              OPTIONAL.
              A JWS containing all published metadata, except the
              <spanx style="verb">signed_metadata</spanx>
              itself.
            </t>
            <t hangText="signed_metadata_uri">
              <vspace/>
              OPTIONAL.
              Location of the signed metadata.
            </t>
            <t hangText="software_statements">
              <vspace/>
              OPTIONAL.
              A list of software statements from all federations
              the entity is part of.
            </t>
            <t hangText="software_statements_uri">
              <vspace/>
              OPTIONAL.
              A JSON object where the member names are the issuer identifiers of
              the federation that has signed a software statement and
              the values are URLs pointing to the corresponding software
              statements.
            </t>
          </list>
        </t>
        <t>
          For all the pairs: software_statements/software_statements_uri,
          signed_metadata/signed_metadata_uri and signing_key/signing_keys_uri
          one and only one parameter from the pair MUST be present.
        </t>
        <t>
          Along the same lines if both <spanx style="verb">jwks_uri</spanx> and
          <spanx style="verb">signed_jwks_uri</spanx> are present, which they
          might be for backward compatibility reasons, then
          <spanx style="verb">signed_jwks_uri</spanx> SHOULD be preferred.
        </t>
      </section>
      <section title="Federation policy">
        <t>
          Any parameters that the federation adds to the software statement that
          also appears in the Provider Configuration response
          <xref target="OpenID.Discovery">(OpenID Connect Discovery 1.0</xref>
          or in a Client Registration request
          <xref target="OpenID.Registration">(OpenID Connect Dynamic Client
            Registration 1.0)
          </xref>
          MUST override what ever value the same
          parameter has in the transferred metadata.
        </t>
        <section title="Additional policy parameters">
          <t>
            The following parameters can be added by a federation to a
            software statement issued by a Relying Party.
          </t>
          <t>
            <list style="hanging">
              <t hangText="claims_allowed">
                <vspace/>
                OPTIONAL.
                A list of claims that the Relying Party may request.
              </t>
              <t hangText="scopes_allowed">
                <vspace/>
                OPTIONAL.
                A list of scopes that the Relying Party may request.
              </t>
            </list>
          </t>
        </section>
      </section>
    </section>
    <section title="Verification process">
      <t>
        Upon receiving metadata from another entity, the following steps
        MUST be performed:
      </t>
      <t>
        <list style="numbers">
          <t>
            Find all software statements published by the counter-party
            either through the
            <spanx style="verb">software_statements</spanx>
            or
            <spanx style="verb">software_statements_uris</spanx>
            signed by any federation
            to which the entity belongs. If the entity and the opponent are
            part of more than one common federation then the entity may decide,
            using any heuristic of its choice, which software statement to use.
          </t>
          <t>
            Verify signature and unpack the chosen software statement:
            <list style="numbers">
              <t>Verify the signature of the software statement using the
                federations public key.
              </t>
              <t>Unpack the opponents primary key from the software
                statement.
              </t>
            </list>
          </t>
          <t>
            Verify signature of the intermediate key, published
            in either <spanx style="verb">signing_key</spanx>
            or <spanx style="verb">signing_key_uri</spanx>
            with the primary key.
         </t>
          <t>Verify the signature of the JWS in
            <spanx style="verb">signed_metadata</spanx>
            with the extracted intermediate signing key, and
            use this metadata instead of the clear-text values provided.
          </t>
         </list>
      </t>
      <t>
        If the entity is an RP receiving metadata from an OP, it MUST also
        verify that the value of the 'issuer' parameter in the software
        statement matches the value of 'issuer' in the discovery
        response.
      </t>
    </section>
    <section title="Provider Discovery">
      <t>
        The OP MUST publish its provider metadata as specified by
        <xref target="OpenID.Discovery">OpenID Connect Discovery 1.0</xref>.
        The RP makes a standard OpenID Provider Configuration Request.
        The OP responds with its provider configuration and the additional
        metadata parameters specified above.
      </t>
      <t>
        Note: Depending on whether signing_key or signing_keys_uri where used
        in the OpenID Provider Configuration Request Response the RP must
        behave differently when the OP rotates its intermediate signing key
        pair.
        If
        <spanx style="verb">signing_key</spanx>
        where used then the RP has to issue a new
        OpenID Provider Configuration request. If the parameter
        <spanx style="verb">signing_keys_uri</spanx>
        the new keys can be obtained by querying
        the URL again.
      </t>
    </section>
    <section title="Client Registration">
      <t>
        The OP MUST support dynamic client registration
        as described in
        <xref target="OpenID.Registration">OpenID Connect Dynamic Client
          Registration 1.0
        </xref>. The RP makes a Client Registration Request including the
        additional metadata specified above.
      </t>
    </section>
    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
        <list style="empty">
          <t>John Bradley</t>
          <t>Mike Jones</t>
          <t>Michael Schwartz</t>
          <t>Peter Schober</t>
        </list>
      </t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>

      <t>All drafts are required to have an IANA considerations section
        (see
        <xref target="RFC5226">Guidelines for Writing an IANA
          Considerations Section in RFCs
        </xref>
        for a guide). If the draft does not require IANA to do
        anything, the section contains an explicit statement that this
        is the
        case (as above). If there are no requirements for IANA, the
        section will
        be removed during conversion into an RFC by the RFC Editor.
      </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>All drafts are required to have a security considerations
        section.
        See
        <xref target="RFC3552">RFC 3552</xref>
        for a guide.
      </t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      <?rfc include="reference.RFC.5226"?>
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.3552"?>
      <?rfc include="reference.RFC.7515"?>
      <?rfc include="reference.RFC.7517"?>
      <?rfc include="reference.RFC.7591"?>
      <reference anchor="OpenID.Core"
                 target="http://openid.net/specs/openid-connect-core-1_0.html">
        <front>
          <title>OpenID Connect Discovery 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.
            </organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B."
                  surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce</organization>
          </author>

          <date day="3" month="August" year="2015"/>
        </front>
      </reference>
      <reference anchor="OpenID.Discovery"
                 target="http://openid.net/specs/openid-connect-discovery-1_0.html">
        <front>
          <title>OpenID Connect Discovery 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.
            </organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="Illumila">Illumila</organization>
          </author>

          <date day="3" month="August" year="2015"/>
        </front>
      </reference>
      <reference anchor="OpenID.Registration"
                 target="http://openid.net/specs/openid-connect-registration-1_0.html">
        <front>
          <title>OpenID Connect Dynamic Client Registration 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.
            </organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <date day="3" month="August" year="2015"/>
        </front>
      </reference>
    </references>

    <!-- Here we use entities that we defined at the beginning. -->
    <section anchor="app-additional" title="Example">
      <t>
        The necessary steps for adding a Relying Party to a federation
      </t>
      <t>
        The following JWKS represents the signing key that
        the Federation Operator is using in the following example:
      </t>
      <figure>
        <artwork><![CDATA[
{
  "keys": [
    {
      "d": "I2kSNvD-WUqIcFP4oX6FnlVnPLzMFujqk5VRnA_cBoFE5N1tcnYTMxYx0F
4U9LzjilG__5ZaAGl4vhr9lO-A1eW54lC2k1CRXdKXC01XmtFnbCif5f_zWze4b4HFiedT
oJ8aeVUxULWbLJPAhxRrekImif1lwlmDyBMx3wXyBpUGontOGgsQAtajM2bw1TO9NHjSqt
vWzNZbZ0NITjzlFZUowRxIYz4MB6TbWaUz9inZAojVoVKV2EWUnJU4jmhnmNVcn2n7oBqW
IEmUS_0cGdUwMwQZydH4DTg7LGtiGRkq8Bgsk2gKHpLcTFGhvY5093Jok36tssPrQCW16N
UdqQ",
      "e": "AQAB",
      "kid": "0HjQPkCccmCBUly-LcOz8OLae-00Lf8NkTgSwNCFH0M",
      "kty": "RSA",
      "n": "t7gWVXUcM44of-Olf-38RzdvYcK9x1htU7kxcUiPflJCXXHZA-1T6UTjdg
toCffJoSYnIZAr_lkF9G6_3t29dqK5fS6yVa3X_e6UDc8qjr8bWH_NEB0hSTBFyCPPx5iN
AzOiuP64nV3v-66H_oT9Pghv1TIzKEpCO33T72XqZYhACbAe8YR5V9kGKP85F-OxN-6GBF
GpQdMybTs2I1OYh6BAsPUZuVxK9K5lpxMZHgG98o-GiiKuDWdZotwQC3dG0YWafFnNFjdq
8Ub980BKmbti767yWOefyPyyjxA8K53w1hNRvh6BWfqwX3gqQzt2x8qLvJw_M36Ozq_DDo
dwjQ",
      "p": "u2kWyk-9Uugf8_6LIBGrs4CI6V6ZYdLenDTuyvYUuYU-ESpfJw8qohDRLU
wcZxRM5Ap3vOyRWmWpuzlfHhypkPtO5Ek1HrSefg85Ggq2jP8jLilwWUpREv4yXNWVu0Zp
_FpyrJzQlpxIrSgP44qRJJvI4IAgHWKss3hQanKr7jk",
      "q": "-vUkNFCwUvLQJgViJvRc0SbBTzdF3z2Fwp23yJbVoaDAFUkQ_DcASlQLxa
w--nubgSrjl9u7AFAGMfK1y2YTvuviZ4e6XjIMUUe8mZ2N5gQoBVjOE-iMRHKLdeZBh3zC
gMWOmsCHrkOHqyUrQ1kmn9rcx01XY-kd5V4vmOxgFPU",
      "use": "sig"
    }
  ]
}
        ]]></artwork>
      </figure>
      <section title="Relying Party joining a federation">
        <section title="Step 1">
          <t>
            Relying Party Operator (RPO) creates the primary key pair.
            <figure>
              <artwork><![CDATA[
{
  "keys": [
    {
      "d": "HIH3fChs_BNvs0V5tLBzTeIH2SRBNo1NJa8xyZuqBskgZqWB0XQOAGzURi
2AtS2BjqK4ltghWrt0BrXKN0l5JIG8pYwLrj8163qQ1yvEsp59l_NmwFWmLz-A3FDs2gzi
7WKZfCHrXgxFQ7YMbrrPQ_hczyT5o9lpPU4XymeUt-8AMM5HrHuF33GsLM5E3Et-H9f8Ou
klczcaBjonznCWRGoWbDDi4p4uraqUt2O7BzGqrnZxOPBf-UnRhAB2jtsNPA4lg_GXGnog
5YEXNzKDEUZGuh4U3iQicuZD6YepjLoH1xE0ZjnZXSshC3lTdva5WMOVAdJ6Zn31DvP2hS
k9ZQ",
      "e": "AQAB",
      "kid": "l4V8JI2FhJGJL1yLw-pVkj_EAfFpze-HbuAlbCXPNyw",
      "kty": "RSA",
      "n": "ywd1xwhKIAzwauWVsAXvRWx3LKYJb0muUkpY0CFpDe_s7ZOGqMvPLkhJC4
ZlysTE_Bu-CXzpHVbxeAWzcVnwSAo7iq0sdYjVxBS5pEcCpiS8qnM9IEb0Si0_MkJh0BQF
KddhPribFW8kohg3XS3SwmIfZQCJVxTJzeWhNtHIARyodVDkdPD9J82Yi5iV3I7NOaKrZY
gbg7w2hm8ji0Ydj47U4MZhlsgikWW0Kj6g2vjvbwp8o7PHjT13sh41Iodcci_O7-Zxuw9A
Mlkn2HDu9dkZjMIwAVQhUGZggFRTaAY8s4o9Fa5n6CEb0yLBTtM1gVZBho1pEXt_R_GJ0l
FtTw",
      "p": "1G7AjNFhdPn6mihZXDa7Wq71qRCPfWhHQlLHzx57rY6l0GfvAI-MNHpUjE
1ce_c1-63KfCP4KjufkBpnJmGj8VHUVMNpLvDLShOcEgPpAVtbZRuUear2ieo1oPzFpD0u
iy9AmVQnYs4ORMdrNF88dOy5iUdMUTyIKFIdzbWDJas",
      "q": "9KsAVJg6XwCbXq-ECpzHiJydyi5bQEHcO15wkOuny-MFrRZ3rX15eibaHj
cD-GYqMaUmGfiWZihL8vnP3clvZ2LmfB-PPrLhn3QyKY0GF3WTACt6N2UwTtcanRaZnqeo
RL6JL1_3d_fdcspi66rRgMzIJKJ5Gf5KKb36kSasqu0",
      "use": "sig"
    }
  ]
}]]></artwork>
            </figure>
          </t>
        </section>
        <section title="Step 2">
          <t>
            The RPO submits registration data to Federation Operator (FO).
          </t>
          <t>
            The following is a non-normative example containing redirect_uris
            and a JWK representing pub(A) (with line breaks within values for
            display purposes
            only):
          </t>
          <figure>
            <artwork><![CDATA[
{
  "redirect_uris": [
    "https://example.com/rp/cb"
  ],
  "signing_key": {
    "e": "AQAB",
    "kid": "l4V8JI2FhJGJL1yLw-pVkj_EAfFpze-HbuAlbCXPNyw",
    "kty": "RSA",
    "n": "ywd1xwhKIAzwauWVsAXvRWx3LKYJb0muUkpY0CFpDe_s7ZOGqMvPLkhJC4Zl
ysTE_Bu-CXzpHVbxeAWzcVnwSAo7iq0sdYjVxBS5pEcCpiS8qnM9IEb0Si0_MkJh0BQFKd
dhPribFW8kohg3XS3SwmIfZQCJVxTJzeWhNtHIARyodVDkdPD9J82Yi5iV3I7NOaKrZYgb
g7w2hm8ji0Ydj47U4MZhlsgikWW0Kj6g2vjvbwp8o7PHjT13sh41Iodcci_O7-Zxuw9AMl
kn2HDu9dkZjMIwAVQhUGZggFRTaAY8s4o9Fa5n6CEb0yLBTtM1gVZBho1pEXt_R_GJ0lFt
Tw",
    "use": "sig"
  }
}
           ]]></artwork>
          </figure>
        </section>
        <section title="Step 3">
          <t>
            The FO returns a signed (with key F) software statement containing
            the submitted registration data, and any applied policy
            restrictions like response_types, signing/encryption algorithms
            to be used and additional specific policy parameters like the ones
            specified above.
          </t>
          <t>

            This is an example of a software statement constructed by the FO
            before it is
            signed by the FO:
          </t>
          <figure>
            <artwork><![CDATA[
{
  "exp": 1458076912,
  "iat": 1458076912,
  "iss": "https://fo.example.com/",
  "jti": "81be65fea18a431faa506f4f7b37b787",
  "redirect_uris": [
    "https://example.com/rp/cb"
  ],
  "response_types": [
    "code",
    "token"
  ],
  "scopes_allowed": [
    "openid",
    "email",
    "phone"
  ],
  "signing_key": {
    "e": "AQAB",
    "kid": "l4V8JI2FhJGJL1yLw-pVkj_EAfFpze-HbuAlbCXPNyw",
    "kty": "RSA",
    "n": "ywd1xwhKIAzwauWVsAXvRWx3LKYJb0muUkpY0CFpDe_s7ZOGqMvPLkhJC4Zl
ysTE_Bu-CXzpHVbxeAWzcVnwSAo7iq0sdYjVxBS5pEcCpiS8qnM9IEb0Si0_MkJh0BQFKd
dhPribFW8kohg3XS3SwmIfZQCJVxTJzeWhNtHIARyodVDkdPD9J82Yi5iV3I7NOaKrZYgb
g7w2hm8ji0Ydj47U4MZhlsgikWW0Kj6g2vjvbwp8o7PHjT13sh41Iodcci_O7-Zxuw9AMl
kn2HDu9dkZjMIwAVQhUGZggFRTaAY8s4o9Fa5n6CEb0yLBTtM1gVZBho1pEXt_R_GJ0lFt
Tw",
    "use": "sig"
  },
  "token_endpoint_auth_method": "private_key_jwt"
}
            ]]></artwork>
          </figure>
          <t>
            and the corresponding software statement:
          </t>
          <figure>
            <artwork><![CDATA[
"eyJhbGciOiJSUzI1NiIsImtpZCI6IjBIalFQa0NjY21DQlVseS1MY096OE9MYWUtMDBMZj
hOa1RnU3dOQ0ZIME0ifQ.eyJyZXNwb25zZV90eXBlcyI6IFsiY29kZSIsICJ0b2tlbiJdL
CAianRpIjogIjgxYmU2NWZlYTE4YTQzMWZhYTUwNmY0ZjdiMzdiNzg3IiwgInJlZGlyZWN
0X3VyaXMiOiBbImh0dHBzOi8vZXhhbXBsZS5jb20vcnAvY2IiXSwgImlhdCI6IDE0NTgwN
zY5MTIsICJpc3MiOiAiaHR0cHM6Ly9mby5leGFtcGxlLmNvbS8iLCAiZXhwIjogMTQ1ODA
3NjkxMiwgInNpZ25pbmdfa2V5IjogeyJlIjogIkFRQUIiLCAidXNlIjogInNpZyIsICJuI
jogInl3ZDF4d2hLSUF6d2F1V1ZzQVh2Uld4M0xLWUpiMG11VWtwWTBDRnBEZV9zN1pPR3F
NdlBMa2hKQzRabHlzVEVfQnUtQ1h6cEhWYnhlQVd6Y1Zud1NBbzdpcTBzZFlqVnhCUzVwR
WNDcGlTOHFuTTlJRWIwU2kwX01rSmgwQlFGS2RkaFByaWJGVzhrb2hnM1hTM1N3bUlmWlF
DSlZ4VEp6ZVdoTnRISUFSeW9kVkRrZFBEOUo4MllpNWlWM0k3Tk9hS3JaWWdiZzd3MmhtO
GppMFlkajQ3VTRNWmhsc2dpa1dXMEtqNmcydmp2YndwOG83UEhqVDEzc2g0MUlvZGNjaV9
PNy1aeHV3OUFNbGtuMkhEdTlka1pqTUl3QVZRaFVHWmdnRlJUYUFZOHM0bzlGYTVuNkNFY
jB5TEJUdE0xZ1ZaQmhvMXBFWHRfUl9HSjBsRnRUdyIsICJraWQiOiAibDRWOEpJMkZoSkd
KTDF5THctcFZral9FQWZGcHplLUhidUFsYkNYUE55dyIsICJrdHkiOiAiUlNBIn0sICJzY
29wZXNfYWxsb3dlZCI6IFsib3BlbmlkIiwgImVtYWlsIiwgInBob25lIl0sICJ0b2tlbl9
lbmRwb2ludF9hdXRoX21ldGhvZCI6ICJwcml2YXRlX2tleV9qd3QifQ.eEn16raaQykOIt
VSNI1FiZ7qvx13Dkbv08OV4cBePklHeO5QiTPnImYoWwPE46KGudk0VY6CZAHfxVWL2smc
8AcsKr9zCuMu7XPFN52gAJ00nBTp2kw7_rphkydWVFmnMXD5Neznsc0MMLCzjPn-8WpBDF
h0Yi7sMUmizeMByznvlR96-WIXf9MFsbtKQhL3Do3_tS_xW6iFvuO_4CI1vf-X5EjdheYM
FUO-d8YlRrW4xHf0gX5f0I-KNrFnRwDJoBgpPXT7XTpeMkoQIIK-uYXwHTQnSBxHCc6349
Rt_unJZ8CPQYwSKIJqZaJ8VamlNVgAZe91nPrAm43-tOblFw"
            ]]></artwork>
          </figure>
          <t>
            This software statement is then expected to be used by the RP
            whenever it wants to register with an OP.
          </t>
        </section>
      </section>
      <section title="Relying party using a software statement">
        <section title="Create intermediate signing key">
          <figure>
            <artwork><![CDATA[
{
  "keys": [
    {
      "d": "F0nNfakDzOl-oIwZFAYFgR1Ot1rd1tIVmeFhTmTkSN-fWJdsjf4W3Xh4Gi
xk2znXo9jqVpFZLdQwLBFpp9-uNriG124ul7KPHTwkgN04Ci4fMc6H2jLOO_swHw1ePlzW
5AYd499z6nzp2fs21YVH86V6sYS0RBfjyJak9UCtyYByXz9-_mKwIYGWijJ4hSLJQwmydn
LnrsKST5gc-N6qfYNfMikXOqtavRxV9e5VkZOkXk4p3w5L4dzzaCqr0VNIvltileGFLSki
4l0YW3mK_17EBOjlOfvi-QgZXKSPbX1752Fu82yu40otS7yXaUip4DqZKDgCOGj8j4WPMG
RDLQ",
      "e": "AQAB",
      "kid": "__ZIRhrPeBwx0ecrUe7HWLc3TA09C8n-u9ojAUFppqQ",
      "kty": "RSA",
      "n": "txoNZ5eATBUtWPrIZk4GVLKtY8FSnv5mi9yn_N-atF5qXL5D8qEcYTa7Je
YEv6oYKSvQ_qeGuUQid3zZ6Rli2-Pattws1fmq5AON92w91eYXL3T8qNA9oelOlYVoHu32
57ERRnLTY5QWoauJSjgYOsPsIRbMC15ESZlgkh3acd0CJYaLiaQVg3PSD7QxUGieV97oVQ
MG5cJNeA9zG0o5eyHp4VpNCCEmX5N5j8jc5K8Ko2Uv-aeiK3fag8rOrU4WcfYWT-BRxLMS
20s3sKMxz6D7QobozokM6N8h2zDZWncZz8nzP4sFzEdwsVG192Pi4BF8ipEN49a6EUYkCR
p0fw",
      "p": "uIERLAbgRsdtvue8h8-efMdwmGlmSAwLl429p11pDTfugmolFnahz8HgX7
A_c8U84N4HdURl1vHwM2uwnAlRJqK0oAcBzXvA0LR0u3fmANZPUm71NuN6j-mgcXZrGRih
lSsSzqpAQ3V2W_4X3kJIyQfTx5_ep3ehqcRZhkVfvFU",
      "q": "_g3dvY38Cm7CzHqg5N265q3mfQBJGOiKMP0WPkRwpfvsJVd5OnIHx3_Euk
IsuMb1SjBpcMcIu5pO_wDxbZenbrEjfSftZRtQY6yDM-xkW48MHZKhlZMf5z9uR9PAslvB
-SNkYRMpPiPdDlCNPI3edIZ0q1sJTTXq3UWwG2ydwYM",
      "use": "sig"
    }
  ]
}
            ]]></artwork>
          </figure>
          <t>
            Signed intermediate key
          </t>
          <figure>
            <artwork><![CDATA[
eyJhbGciOiJSUzM4NCIsImtpZCI6Imw0VjhKSTJGaEpHSkwxeUx3LXBWa2pfRUFmRnB6ZS
1IYnVBbGJDWFBOeXcifQ.eyJrZXlzIjpbeyJlIjoiQVFBQiIsInVzZSI6InNpZyIsIm4iO
iJ0eG9OWjVlQVRCVXRXUHJJWms0R1ZMS3RZOEZTbnY1bWk5eW5fTi1hdEY1cVhMNUQ4cUV
jWVRhN0plWUV2Nm9ZS1N2UV9xZUd1VVFpZDN6WjZSbGkyLVBhdHR3czFmbXE1QU9OOTJ3O
TFlWVhMM1Q4cU5BOW9lbE9sWVZvSHUzMjU3RVJSbkxUWTVRV29hdUpTamdZT3NQc0lSYk1
DMTVFU1psZ2toM2FjZDBDSllhTGlhUVZnM1BTRDdReFVHaWVWOTdvVlFNRzVjSk5lQTl6R
zBvNWV5SHA0VnBOQ0NFbVg1TjVqOGpjNUs4S28yVXYtYWVpSzNmYWc4ck9yVTRXY2ZZV1Q
tQlJ4TE1TMjBzM3NLTXh6NkQ3UW9ib3pva002TjhoMnpEWlduY1p6OG56UDRzRnpFZHdzV
kcxOTJQaTRCRjhpcEVONDlhNkVVWWtDUnAwZnciLCJraWQiOiJfX1pJUmhyUGVCd3gwZWN
yVWU3SFdMYzNUQTA5QzhuLXU5b2pBVUZwcHFRIiwia3R5IjoiUlNBIn1dfQ.CmgW7xp_OI
Du_tCgvHWbRKjWByVJxDuPeZKxs0atVWI_aY-nqOJB5PTNaYKYAyu_f01kFRyo_h-Mgc-G
TGgH0gMOJJNOJqnKl-vlT6w-NHmYxjscv8hKFhAfsCo-1RzjA4CZD9iTU9GoR-rRaz7kFZ
8xo6Ghjj3AKzZR6ih3ehaOa54jAwAjpUVHtxFMWUz99Y5zYp-kL4cgOYoRZfmoYEgSa5B0
zOrc-VqBuRNgqBDvmgXNyJfinn7fKgaj6bDz6tWTeiUn7V2qffHXn5F4PL9yC7acSBeNl3
Ava4xyVy6on4JLrZ2MWiCcUt2h-qh5MpfWWH4DE8qLHqA04MOanw
            ]]></artwork>
          </figure>
        </section>
        <section
            title="Create keys to be used during the communication with the OP">
          <t>
            These keys can be fetched from the jwks_uri location
          </t>
          <figure>
            <artwork><![CDATA[
{
  "keys": [
    {
      "e": "AQAB",
      "kid": "D5fdPhs6cZochj3YpE9tH5xDubxX_KAXJAOM_EfWvqg",
      "kty": "RSA",
      "n": "2Tc-llURwqV-PedoBVR-ba1MuZ8I5Ms0QpCwfLVD_dAjodSAk5aQeBuFYb
oP4Jk79dOfsoLMLe-iGZzwuYzgAjDyz9IuZlbEDIsFj6_7Xa3pEtU6YxK6JZKOGWK-h7nj
1qSDYomtrGBnzX9yg_HaKa8gRqkgMYb2gOMgtrSq7HTdonECnkMoPmGo5y4cYM8utGKdBz
q5h-vXs8Y-gbpjWcWTcR6oYDx-HEgwDo_tXCdPZbtyidK9PC7cCi-uHmiHPLL4Y4wKujNM
eZukHLCqJNI77y73P9lnLcozkNgRv5OC88zJx1warf1AF5orBvpD7pPQvKz4FetuW0oxtF
Yptw",
      "use": "sig"
    },
    {
      "e": "AQAB",
      "kid": "Vfqtg0erALDq0gL0SETIosZdPYScjzw2ZHp6DRn19z4",
      "kty": "RSA",
      "n": "rT3r5GRwwAguBwqrVi8yBcalMn_Lh2M1sl46XO7xSLOZH3T5B90gz5aS4U
QNynOInpTm-nzYtK1CcYKmJQfdTRRauJxNtrN99XOnm0pQn7PHWDqJHAWUVnwCkpqkUjJr
Bqb4wRXYw6He08308ikJSDCI6s4yxpp9q8FoUl-W2sww9oR86S-K_SovrHf4e-Wjqf-7K8
R8fnfoJ5qJfZIi0clY5y6S8jqz5ho9OlmN6Z90X0mZmdblaT_YTcEtwf3mz7aqVI3BerNc
msIlmB9ULPJbTtQ6sR4DNMkgQcZ-5dCF_PMmRqKJG4ohE2xGKIbqkaJAfTez6Vn4w3E_rH
vvoQ",
      "use": "enc"
    },
    {
      "crv": "P-256",
      "kid": "obP06OwixVXL3-kMIwfmyuYtONNSzAG-T1N0FMgIPYA",
      "kty": "EC",
      "use": "sig",
      "x": "b7t3-CcAeDJSGE5ADdxifus1LrdsQCMZkj9c7Gbw770",
      "y": "h2CQjaWH-cTvvCD4rhTs2uq7OZP6G0cJRm4cq0KkgS4"
    },
    {
      "crv": "P-256",
      "kid": "ggasxnDILkvO8WMqJkgNKxphK0p2RtJSeVa4P7Hy0wQ",
      "kty": "EC",
      "use": "enc",
      "x": "nJWO4QHXgcu2G3RUrq4v1lLx0-1itdMImIH5aNiG5Uc",
      "y": "mQ7G0DAYGQb9-Cz5iFp6-TJSzgdWoZ_0Jxob7volA0U"
    }
  ]
}
            ]]></artwork>
          </figure>
          <t>or in the signed version at signed_jwks_uri</t>
          <figure>
            <artwork><![CDATA[
eyJhbGciOiJSUzI1NiIsImtpZCI6Il9fWklSaHJQZUJ3eDBlY3JVZTdIV0xjM1RBMDlDOG
4tdTlvakFVRnBwcVEifQ.eyJrZXlzIjpbeyJlIjoiQVFBQiIsInVzZSI6InNpZyIsIm4iO
iIyVGMtbGxVUndxVi1QZWRvQlZSLWJhMU11WjhJNU1zMFFwQ3dmTFZEX2RBam9kU0FrNWF
RZUJ1Rllib1A0Sms3OWRPZnNvTE1MZS1pR1p6d3VZemdBakR5ejlJdVpsYkVESXNGajZfN
1hhM3BFdFU2WXhLNkpaS09HV0staDduajFxU0RZb210ckdCbnpYOXlnX0hhS2E4Z1Jxa2d
NWWIyZ09NZ3RyU3E3SFRkb25FQ25rTW9QbUdvNXk0Y1lNOHV0R0tkQnpxNWgtdlhzOFktZ
2JwaldjV1RjUjZvWUR4LUhFZ3dEb190WENkUFpidHlpZEs5UEM3Y0NpLXVIbWlIUExMNFk
0d0t1ak5NZVp1a0hMQ3FKTkk3N3k3M1A5bG5MY296a05nUnY1T0M4OHpKeDF3YXJmMUFGN
W9yQnZwRDdwUFF2S3o0RmV0dVcwb3h0RllwdHciLCJraWQiOiJENWZkUGhzNmNab2NoajN
ZcEU5dEg1eER1YnhYX0tBWEpBT01fRWZXdnFnIiwia3R5IjoiUlNBIn0seyJlIjoiQVFBQ
iIsInVzZSI6ImVuYyIsIm4iOiJyVDNyNUdSd3dBZ3VCd3FyVmk4eUJjYWxNbl9MaDJNMXN
sNDZYTzd4U0xPWkgzVDVCOTBnejVhUzRVUU55bk9JbnBUbS1uell0SzFDY1lLbUpRZmRUU
lJhdUp4TnRyTjk5WE9ubTBwUW43UEhXRHFKSEFXVVZud0NrcHFrVWpKckJxYjR3UlhZdzZ
IZTA4MzA4aWtKU0RDSTZzNHl4cHA5cThGb1VsLVcyc3d3OW9SODZTLUtfU292ckhmNGUtV
2pxZi03SzhSOGZuZm9KNXFKZlpJaTBjbFk1eTZTOGpxejVobzlPbG1ONlo5MFgwbVptZGJ
sYVRfWVRjRXR3ZjNtejdhcVZJM0Jlck5jbXNJbG1COVVMUEpiVHRRNnNSNEROTWtnUWNaL
TVkQ0ZfUE1tUnFLSkc0b2hFMnhHS0licWthSkFmVGV6NlZuNHczRV9ySHZ2b1EiLCJraWQ
iOiJWZnF0ZzBlckFMRHEwZ0wwU0VUSW9zWmRQWVNjanp3MlpIcDZEUm4xOXo0Iiwia3R5I
joiUlNBIn0seyJjcnYiOiJQLTI1NiIsImt0eSI6IkVDIiwidXNlIjoic2lnIiwia2lkIjo
ib2JQMDZPd2l4VlhMMy1rTUl3Zm15dVl0T05OU3pBRy1UMU4wRk1nSVBZQSIsInkiOiJoM
kNRamFXSC1jVHZ2Q0Q0cmhUczJ1cTdPWlA2RzBjSlJtNGNxMEtrZ1M0IiwieCI6ImI3dDM
tQ2NBZURKU0dFNUFEZHhpZnVzMUxyZHNRQ01aa2o5YzdHYnc3NzAifSx7ImNydiI6IlAtM
jU2Iiwia3R5IjoiRUMiLCJ1c2UiOiJlbmMiLCJraWQiOiJnZ2FzeG5ESUxrdk84V01xSmt
nTkt4cGhLMHAyUnRKU2VWYTRQN0h5MHdRIiwieSI6Im1RN0cwREFZR1FiOS1DejVpRnA2L
VRKU3pnZFdvWl8wSnhvYjd2b2xBMFUiLCJ4IjoibkpXTzRRSFhnY3UyRzNSVXJxNHYxbEx
4MC0xaXRkTUltSUg1YU5pRzVVYyJ9XX0.sL38ZWPqaEiVIZQ4dWeuKcYAFg7FgR2kjFPRZ
pqKbGGkNqhyGvtGbwr3UaAfSWvM9cZfNsUaJAtYqXrYRzzwvY42LHMXq3ABjl_7eNHgXCB
Xc4ezYXJPcq0qgL3AYTjUwaFiLEWvu40V2xBE4a-X6zU5YjA6P9URyZXDaAbUsXExjHhJL
Bx9JMG2ubotnRv4OX8fvpyTACoymvCkXu3TeyxjZ0i6xpqtAZPyGW6ViHLVPnvx9_gw3oG
sPhlUAt2R-eVa2LV4HYfKNszED7pYi0xna5dz2tImkNE0TaFBHb5oVDG9rwgyWBEh6-kCH
CPpPBQSD6ix3v573Ay4FJx1Sw
            ]]></artwork>
          </figure>
        </section>
        <section title="Construct the client registration request">
          <figure>
            <artwork><![CDATA[
{
  "id_token_signed_response_alg": "SHA-256",
  "jwks_uri": "https://example.com/rp/jwks",
  "response_types": [
    "code"
  ],
  "signed_jwks_uri": "https://example.com/rp/signed_jwks",
  "signed_metadata": "eyJhbGciOiJSUzI1NiIsImtpZCI6Imw0VjhKSTJGaEpHSkwx
eUx3LXBWa2pfRUFmRnB6ZS1IYnVBbGJDWFBOeXcifQ.eyJzb2Z0d2FyZV9zdGF0ZW1lbnR
zIjogWyJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpCSWFsRlFhME5qWTIxRFFsV
nNlUzFNWTA5Nk9FOU1ZV1V0TURCTVpqaE9hMVJuVTNkT1EwWklNRTBpZlEuZXlKeVpYTnd
iMjV6WlY5MGVYQmxjeUk2SUZzaVkyOWtaU0lzSUNKMGIydGxiaUpkTENBaWFuUnBJam9nS
WpneFltVTJOV1psWVRFNFlUUXpNV1poWVRVd05tWTBaamRpTXpkaU56ZzNJaXdnSW5KbFp
HbHlaV04wWDNWeWFYTWlPaUJiSW1oMGRIQnpPaTh2WlhoaGJYQnNaUzVqYjIwdmNuQXZZM
klpWFN3Z0ltbGhkQ0k2SURFME5UZ3dOelk1TVRJc0lDSnBjM01pT2lBaWFIUjBjSE02THk
5bWJ5NWxlR0Z0Y0d4bExtTnZiUzhpTENBaVpYaHdJam9nTVRRMU9EQTNOamt4TWl3Z0luT
nBaMjVwYm1kZmEyVjVJam9nZXlKbElqb2dJa0ZSUVVJaUxDQWlkWE5sSWpvZ0luTnBaeUl
zSUNKdUlqb2dJbmwzWkRGNGQyaExTVUY2ZDJGMVYxWnpRVmgyVWxkNE0weExXVXBpTUcxM
VZXdHdXVEJEUm5CRVpWOXpOMXBQUjNGTmRsQk1hMmhLUXpSYWJIbHpWRVZmUW5VdFExaDZ
jRWhXWW5obFFWZDZZMVp1ZDFOQmJ6ZHBjVEJ6WkZscVZuaENVelZ3UldORGNHbFRPSEZ1V
FRsSlJXSXdVMmt3WDAxclNtZ3dRbEZHUzJSa2FGQnlhV0pHVnpocmIyaG5NMWhUTTFOM2J
VbG1XbEZEU2xaNFZFcDZaVmRvVG5SSVNVRlNlVzlrVmtSclpGQkVPVW80TWxscE5XbFdNM
GszVGs5aFMzSmFXV2RpWnpkM01taHRPR3BwTUZsa2FqUTNWVFJOV21oc2MyZHBhMWRYTUV
0cU5tY3lkbXAyWW5kd09HODNVRWhxVkRFemMyZzBNVWx2WkdOamFWOVBOeTFhZUhWM09VR
k5iR3R1TWtoRWRUbGthMXBxVFVsM1FWWlJhRlZIV21kblJsSlVZVUZaT0hNMGJ6bEdZVFZ
1TmtORllqQjVURUpVZEUweFoxWmFRbWh2TVhCRldIUmZVbDlIU2pCc1JuUlVkeUlzSUNKc
mFXUWlPaUFpYkRSV09FcEpNa1pvU2tkS1RERjVUSGN0Y0ZacmFsOUZRV1pHY0hwbExVaGl
kVUZzWWtOWVVFNTVkeUlzSUNKcmRIa2lPaUFpVWxOQkluMHNJQ0p6WTI5d1pYTmZZV3hzY
jNkbFpDSTZJRnNpYjNCbGJtbGtJaXdnSW1WdFlXbHNJaXdnSW5Cb2IyNWxJbDBzSUNKMGI
ydGxibDlsYm1Sd2IybHVkRjloZFhSb1gyMWxkR2h2WkNJNklDSndjbWwyWVhSbFgydGxlV
jlxZDNRaWZRLmVFbjE2cmFhUXlrT0l0VlNOSTFGaVo3cXZ4MTNEa2J2MDhPVjRjQmVQa2x
IZU81UWlUUG5JbVlvV3dQRTQ2S0d1ZGswVlk2Q1pBSGZ4VldMMnNtYzhBY3NLcjl6Q3VNd
TdYUEZONTJnQUowMG5CVHAya3c3X3JwaGt5ZFdWRm1uTVhENU5lem5zYzBNTUxDempQbi0
4V3BCREZoMFlpN3NNVW1pemVNQnl6bnZsUjk2LVdJWGY5TUZzYnRLUWhMM0RvM190U194V
zZpRnZ1T180Q0kxdmYtWDVFamRoZVlNRlVPLWQ4WWxSclc0eEhmMGdYNWYwSS1LTnJGblJ
3REpvQmdwUFhUN1hUcGVNa29RSUlLLXVZWHdIVFFuU0J4SENjNjM0OVJ0X3VuSlo4Q1BRW
XdTS0lKcVphSjhWYW1sTlZnQVplOTFuUHJBbTQzLXRPYmxGdyJdLCAiandrc191cmkiOiA
iaHR0cHM6Ly9leGFtcGxlLmNvbS9ycC9qd2tzIiwgImlkX3Rva2VuX3NpZ25lZF9yZXNwb
25zZV9hbGciOiAiU0hBLTI1NiIsICJyZXNwb25zZV90eXBlcyI6IFsiY29kZSJdLCAic2l
nbmluZ19rZXkiOiAiZXlKaGJHY2lPaUpTVXpNNE5DSXNJbXRwWkNJNkltdzBWamhLU1RKR
2FFcEhTa3d4ZVV4M0xYQldhMnBmUlVGbVJuQjZaUzFJWW5WQmJHSkRXRkJPZVhjaWZRLmV
5SnJaWGx6SWpwYmV5SmxJam9pUVZGQlFpSXNJblZ6WlNJNkluTnBaeUlzSW00aU9pSjBlR
zlPV2pWbFFWUkNWWFJYVUhKSldtczBSMVpNUzNSWk9FWlRiblkxYldrNWVXNWZUaTFoZEV
ZMWNWaE1OVVE0Y1VWaldWUmhOMHBsV1VWMk5tOVpTMU4yVVY5eFpVZDFWVkZwWkRONldqW
lNiR2t5TFZCaGRIUjNjekZtYlhFMVFVOU9PVEozT1RGbFdWaE1NMVE0Y1U1Qk9XOWxiRTl
zV1ZadlNIVXpNalUzUlZKU2JreFVXVFZSVjI5aGRVcFRhbWRaVDNOUWMwbFNZazFETVRWR
lUxcHNaMnRvTTJGalpEQkRTbGxoVEdsaFVWWm5NMUJUUkRkUmVGVkhhV1ZXT1RkdlZsRk5
SelZqU2s1bFFUbDZSekJ2TldWNVNIQTBWbkJPUTBORmJWZzFUalZxT0dwak5VczRTMjh5V
lhZdFlXVnBTek5tWVdjNGNrOXlWVFJYWTJaWlYxUXRRbEo0VEUxVE1qQnpNM05MVFhoNk5
rUTNVVzlpYjNwdmEwMDJUamhvTW5wRVdsZHVZMXA2T0c1NlVEUnpSbnBGWkhkelZrY3hPV
EpRYVRSQ1JqaHBjRVZPTkRsaE5rVlZXV3REVW5Bd1puY2lMQ0pyYVdRaU9pSmZYMXBKVW1
oeVVHVkNkM2d3WldOeVZXVTNTRmRNWXpOVVFUQTVRemh1TFhVNWIycEJWVVp3Y0hGUklpd
2lhM1I1SWpvaVVsTkJJbjFkZlEuQ21nVzd4cF9PSUR1X3RDZ3ZIV2JSS2pXQnlWSnhEdVB
lWkt4czBhdFZXSV9hWS1ucU9KQjVQVE5hWUtZQXl1X2YwMWtGUnlvX2gtTWdjLUdUR2dIM
GdNT0pKTk9KcW5LbC12bFQ2dy1OSG1ZeGpzY3Y4aEtGaEFmc0NvLTFSempBNENaRDlpVFU
5R29SLXJSYXo3a0ZaOHhvNkdoamozQUt6WlI2aWgzZWhhT2E1NGpBd0FqcFVWSHR4Rk1XV
Xo5OVk1ellwLWtMNGNnT1lvUlpmbW9ZRWdTYTVCMHpPcmMtVnFCdVJOZ3FCRHZtZ1hOeUp
maW5uN2ZLZ2FqNmJEejZ0V1RlaVVuN1YycWZmSFhuNUY0UEw5eUM3YWNTQmVObDNBdmE0e
HlWeTZvbjRKTHJaMk1XaUNjVXQyaC1xaDVNcGZXV0g0REU4cUxIcUEwNE1PYW53IiwgInN
pZ25lZF9qd2tzX3VyaSI6ICJodHRwczovL2V4YW1wbGUuY29tL3JwL3NpZ25lZF9qd2tzI
n0.sjdWhxr8NFUXU69yFiiDGUlEEWY9qtMC05c1ZPfYyRYan8r90xXgF_2ALdMeozC_6gK
Dskdm0brGPnzqfCP_PgmOi_dHHr-gl8sx-lHpYZx4SAZy6MrV_DQbCgDUcpRyW3pcyZqEH
g_CvdlMT3SU8qUbp3rdRrX8Sv09VnacbigeVTUEv9-wQ5Gav509uh12jMyiWRftoolGzRD
hj28tx30yfq_HzNlhPFIEk-0QFj_8Fxm5wy8lspOyPXgzbtHM1sDhQnmTFtQmqQkVi9YWi
6KpQDg44o94z0sBRD0BtpAM-lXA5Q2H9DdOUcHk7alta9P53PGa-_hXU8jfJh3e4g",
  "signing_key": "eyJhbGciOiJSUzM4NCIsImtpZCI6Imw0VjhKSTJGaEpHSkwxeUx3
LXBWa2pfRUFmRnB6ZS1IYnVBbGJDWFBOeXcifQ.eyJrZXlzIjpbeyJlIjoiQVFBQiIsInV
zZSI6InNpZyIsIm4iOiJ0eG9OWjVlQVRCVXRXUHJJWms0R1ZMS3RZOEZTbnY1bWk5eW5fT
i1hdEY1cVhMNUQ4cUVjWVRhN0plWUV2Nm9ZS1N2UV9xZUd1VVFpZDN6WjZSbGkyLVBhdHR
3czFmbXE1QU9OOTJ3OTFlWVhMM1Q4cU5BOW9lbE9sWVZvSHUzMjU3RVJSbkxUWTVRV29hd
UpTamdZT3NQc0lSYk1DMTVFU1psZ2toM2FjZDBDSllhTGlhUVZnM1BTRDdReFVHaWVWOTd
vVlFNRzVjSk5lQTl6RzBvNWV5SHA0VnBOQ0NFbVg1TjVqOGpjNUs4S28yVXYtYWVpSzNmY
Wc4ck9yVTRXY2ZZV1QtQlJ4TE1TMjBzM3NLTXh6NkQ3UW9ib3pva002TjhoMnpEWlduY1p
6OG56UDRzRnpFZHdzVkcxOTJQaTRCRjhpcEVONDlhNkVVWWtDUnAwZnciLCJraWQiOiJfX
1pJUmhyUGVCd3gwZWNyVWU3SFdMYzNUQTA5QzhuLXU5b2pBVUZwcHFRIiwia3R5IjoiUlN
BIn1dfQ.CmgW7xp_OIDu_tCgvHWbRKjWByVJxDuPeZKxs0atVWI_aY-nqOJB5PTNaYKYAy
u_f01kFRyo_h-Mgc-GTGgH0gMOJJNOJqnKl-vlT6w-NHmYxjscv8hKFhAfsCo-1RzjA4CZ
D9iTU9GoR-rRaz7kFZ8xo6Ghjj3AKzZR6ih3ehaOa54jAwAjpUVHtxFMWUz99Y5zYp-kL4
cgOYoRZfmoYEgSa5B0zOrc-VqBuRNgqBDvmgXNyJfinn7fKgaj6bDz6tWTeiUn7V2qffHX
n5F4PL9yC7acSBeNl3Ava4xyVy6on4JLrZ2MWiCcUt2h-qh5MpfWWH4DE8qLHqA04MOanw
",
  "software_statements": [
    "eyJhbGciOiJSUzI1NiIsImtpZCI6IjBIalFQa0NjY21DQlVseS1MY096OE9MYWUtM
DBMZjhOa1RnU3dOQ0ZIME0ifQ.eyJyZXNwb25zZV90eXBlcyI6IFsiY29kZSIsICJ0b2tl
biJdLCAianRpIjogIjgxYmU2NWZlYTE4YTQzMWZhYTUwNmY0ZjdiMzdiNzg3IiwgInJlZG
lyZWN0X3VyaXMiOiBbImh0dHBzOi8vZXhhbXBsZS5jb20vcnAvY2IiXSwgImlhdCI6IDE0
NTgwNzY5MTIsICJpc3MiOiAiaHR0cHM6Ly9mby5leGFtcGxlLmNvbS8iLCAiZXhwIjogMT
Q1ODA3NjkxMiwgInNpZ25pbmdfa2V5IjogeyJlIjogIkFRQUIiLCAidXNlIjogInNpZyIs
ICJuIjogInl3ZDF4d2hLSUF6d2F1V1ZzQVh2Uld4M0xLWUpiMG11VWtwWTBDRnBEZV9zN1
pPR3FNdlBMa2hKQzRabHlzVEVfQnUtQ1h6cEhWYnhlQVd6Y1Zud1NBbzdpcTBzZFlqVnhC
UzVwRWNDcGlTOHFuTTlJRWIwU2kwX01rSmgwQlFGS2RkaFByaWJGVzhrb2hnM1hTM1N3bU
lmWlFDSlZ4VEp6ZVdoTnRISUFSeW9kVkRrZFBEOUo4MllpNWlWM0k3Tk9hS3JaWWdiZzd3
MmhtOGppMFlkajQ3VTRNWmhsc2dpa1dXMEtqNmcydmp2YndwOG83UEhqVDEzc2g0MUlvZG
NjaV9PNy1aeHV3OUFNbGtuMkhEdTlka1pqTUl3QVZRaFVHWmdnRlJUYUFZOHM0bzlGYTVu
NkNFYjB5TEJUdE0xZ1ZaQmhvMXBFWHRfUl9HSjBsRnRUdyIsICJraWQiOiAibDRWOEpJMk
ZoSkdKTDF5THctcFZral9FQWZGcHplLUhidUFsYkNYUE55dyIsICJrdHkiOiAiUlNBIn0s
ICJzY29wZXNfYWxsb3dlZCI6IFsib3BlbmlkIiwgImVtYWlsIiwgInBob25lIl0sICJ0b2
tlbl9lbmRwb2ludF9hdXRoX21ldGhvZCI6ICJwcml2YXRlX2tleV9qd3QifQ.eEn16raaQ
ykOItVSNI1FiZ7qvx13Dkbv08OV4cBePklHeO5QiTPnImYoWwPE46KGudk0VY6CZAHfxVW
L2smc8AcsKr9zCuMu7XPFN52gAJ00nBTp2kw7_rphkydWVFmnMXD5Neznsc0MMLCzjPn-8
WpBDFh0Yi7sMUmizeMByznvlR96-WIXf9MFsbtKQhL3Do3_tS_xW6iFvuO_4CI1vf-X5Ej
dheYMFUO-d8YlRrW4xHf0gX5f0I-KNrFnRwDJoBgpPXT7XTpeMkoQIIK-uYXwHTQnSBxHC
c6349Rt_unJZ8CPQYwSKIJqZaJ8VamlNVgAZe91nPrAm43-tOblFw"
  ]
}
            ]]></artwork>
          </figure>
        </section>
      </section>
      <section title="The OP handling the Client Registration Request">
        <section title="Received Primary Key">
          <t>
            The primary key is found in the Software Statement.
            The signature of the Software Statement is verified using the
            public key of the FO.
          </t>
          <figure>
            <artwork><![CDATA[
{
  "e": "AQAB",
  "kid": "l4V8JI2FhJGJL1yLw-pVkj_EAfFpze-HbuAlbCXPNyw",
  "kty": "RSA",
  "n": "ywd1xwhKIAzwauWVsAXvRWx3LKYJb0muUkpY0CFpDe_s7ZOGqMvPLkhJC4Zlys
TE_Bu-CXzpHVbxeAWzcVnwSAo7iq0sdYjVxBS5pEcCpiS8qnM9IEb0Si0_MkJh0BQFKddh
PribFW8kohg3XS3SwmIfZQCJVxTJzeWhNtHIARyodVDkdPD9J82Yi5iV3I7NOaKrZYgbg7
w2hm8ji0Ydj47U4MZhlsgikWW0Kj6g2vjvbwp8o7PHjT13sh41Iodcci_O7-Zxuw9AMlkn
2HDu9dkZjMIwAVQhUGZggFRTaAY8s4o9Fa5n6CEb0yLBTtM1gVZBho1pEXt_R_GJ0lFtTw
",
  "use": "sig"
}
           ]]></artwork>
          </figure>
        </section>
        <section title="Received intermediat key">
          <t>
            The intermediate key is in this case the value of the
            <spanx style="verb">signed_key</spanx>
            parameter.
            The value being a JWS signed by the primary key.
          </t>
          <figure>
            <artwork><![CDATA[
{
  "keys": [
    {
      "e": "AQAB",
      "kid": "__ZIRhrPeBwx0ecrUe7HWLc3TA09C8n-u9ojAUFppqQ",
      "kty": "RSA",
      "n": "txoNZ5eATBUtWPrIZk4GVLKtY8FSnv5mi9yn_N-atF5qXL5D8qEcYTa7Je
YEv6oYKSvQ_qeGuUQid3zZ6Rli2-Pattws1fmq5AON92w91eYXL3T8qNA9oelOlYVoHu32
57ERRnLTY5QWoauJSjgYOsPsIRbMC15ESZlgkh3acd0CJYaLiaQVg3PSD7QxUGieV97oVQ
MG5cJNeA9zG0o5eyHp4VpNCCEmX5N5j8jc5K8Ko2Uv-aeiK3fag8rOrU4WcfYWT-BRxLMS
20s3sKMxz6D7QobozokM6N8h2zDZWncZz8nzP4sFzEdwsVG192Pi4BF8ipEN49a6EUYkCR
p0fw",
      "use": "sig"
    }
  ]
}
            ]]></artwork>
          </figure>
        </section>
        <section title="Verifying Metadata">
          <t>The signed representation of the registation request can
            now be verified using the intermediate key
          </t>
        </section>
        <section title="Verifying the public keys">
          <t>
            The signature on the signed version of the RP's public keys that has
            been fetched from the location pointed to be
            <spanx style="verb">signed_jwks_uri</spanx>
            can now be verified, again using the intermediate key.
          </t>
        </section>
      </section>
    </section>
  </back>
</rfc>

